
# Define and select the environment at the bottom of this file

# You need direnv installed (including shell hook) to benefit from this
# see: https://direnv.net/docs/installation.html
# and: https://direnv.net/docs/hook.html

install_micromamba() {
  mkdir -p .micromamba/bin
  # if you have a global ~/micromamba/pkgs or ~/.mamba/pkgs, use that to cache downloaded packages
  if [[ ! -d .micromamba/pkgs && -d ~/micromamba/pkgs ]]; then
    ln -s ~/micromamba/pkgs .micromamba/pkgs
  elif [[ ! -d .micromamba/pkgs && -d ~/.mamba/pkgs ]]; then
    ln -s ~/.mamba/pkgs .micromamba/pkgs
  fi

  # Select and download micromamba into .micromamba/bin
  # Computing artifact location
  case "$(uname)" in
    Linux)  PLATFORM="linux" ;;
    Darwin) PLATFORM="osx" ;;
    *NT*)   PLATFORM="win" ;;
  esac
  ARCH="$(uname -m | sed 's/x86_64/64/')"
  case "$PLATFORM-$ARCH" in
    linux-aarch64|linux-ppc64le|linux-64|osx-arm64|osx-64|win-64)
        ;;  # pass
    *)
      echo "Failed to detect your OS" >&2
      exit 1
      ;;
  esac
  RELEASE_URL="https://github.com/mamba-org/micromamba-releases/releases/latest/download/micromamba-${PLATFORM}-${ARCH}"
  echo "Downloading micromamba from ${RELEASE_URL}"
  # download
  if hash curl >/dev/null 2>&1; then
    curl "${RELEASE_URL}" -o .micromamba/bin/micromamba -fsSL --compressed ${CURL_OPTS:-}
  elif hash wget >/dev/null 2>&1; then
    wget ${WGET_OPTS:-} -qO .micromamba/bin/micromamba "${RELEASE_URL}"
  else
    echo "Neither curl nor wget was found" >&2
    exit 1
  fi;
  chmod +x .micromamba/bin/micromamba
}

layout_local-micromamba() {
  # if micromamba is not installed, install it
  if [ ! -f .micromamba/bin/micromamba ]; then
    install_micromamba
  fi;

  export MAMBA_ROOT_PREFIX="$(pwd)/.micromamba"
  export PATH="${MAMBA_ROOT_PREFIX}/bin":$PATH
  eval "$(.micromamba/bin/micromamba shell hook)"

  if [ -n "$1" ]; then
    # got explicit environment name from layout command.
    local env_name="$1"
    if [ -d ".micromamba/envs/${env_name}" ]; then
      # if the environment already exists, activate it.
      micromamba activate ${env_name}
    elif [ -n "$2" ]; then
      # if it doesn't exist, but a spec was provided, create it.
      micromamba create -n $*
      micromamba activate ${env_name}
    else
      # otherwise inform that it is missing
      (>&2 echo "")
      (>&2 echo "No environment packages specified as second parameter to 'layout local-micromamba $1'");
      (>&2 echo "Please create the environment using:");
      (>&2 echo "  eval \"\$(micromamba shell hook)\"");
      (>&2 echo "  micromamba create -n ${env_name}");
      (>&2 echo "  micromamba activate ${env_name}");
      (>&2 echo "and then populate the environment using micromamba install");
      (>&2 echo "... or specify list of packages to install at the end of .envrc line: 'layout local-micromamba ${env_name} <list-of-packages>'");
      (>&2 echo "")
      #export CONDA_PROMPT_MODIFIER="(no mamba environment!!) "
      #exit 1;
    fi;
  elif (grep -q name: environment.yml); then
    # detect environment name from `environment.yml` file in `.envrc` directory
    local env_name=$(grep name: environment.yml | sed -e 's/name: //')
    if [ ! -d ".micromamba/envs/${env_name}" ]; then
        micromamba create -n ${env_name} -f environment.yml
    fi;
    micromamba activate ${env_name}
  else
    (>&2 echo No environment specified nor is environment.yml file present.);
    exit 1;
  fi;
  
  # Set up the prompt to show the active environment
  export DIRENV_PS1=${CONDA_PROMPT_MODIFIER}
  # If you don't see ^^^ environment name in shell prompt, then execute:
  #   echo "export PS1='\${DIRENV_PS1}'\$PS1" >> ~/.bashrc
  # or manually add the following line to ~/.bashrc:
  #   PS1='${DIRENV_PS1}'$PS1
  # (figure out how to do that for zsh, fish, etc.)
}

# ----------------------------------------------------------
# environment definitions
# ----------------------------------------------------------


# specify and select environment to use:

#                       name          list of packages and channels passed to "micromamba create ..."
#layout local-micromamba torch210py311 python=3.11 pytorch=2.1.0 pytorch-cuda=11.8 numpy -c pytorch -c nvidia -c conda -c anaconda
layout local-micromamba "üî¶210üêç311üß†121" python=3.11 pytorch=2.1.0 pytorch-cuda=12.1 numpy ipykernel -c pytorch -c nvidia -c conda -c anaconda

#layout local-micromamba torch201py311 python=3.11 pytorch=2.0.1 pytorch-cuda=11.7 numpy -c pytorch -c nvidia -c conda -c anaconda
#layout local-micromamba torch201py310 python=3.10 pytorch=2.0.1 pytorch-cuda=11.7 numpy -c pytorch -c nvidia -c conda -c anaconda

# or if you have `environment.yml` file in .envrc directory, then invoke layout local-micromamba without any parameters
#layout local-micromamba 


